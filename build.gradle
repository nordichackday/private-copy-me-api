buildscript {
    ext {
        springBootVersion = '1.3.1.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: springBootVersion
    }
}

plugins {
    id "org.sonarqube" version "1.0"
}

ext {
    javaVersion = 1.8

    springBootVersion = '1.3.1.RELEASE'
    jacksonVersion = '2.6.4'
    mainClassName = 'nordichack.pcmapi.rest.PcmWebApplication'

}


apply plugin: 'spring-boot'


apply plugin: 'java'

apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'


group = 'nordichack.pcmapi'
version = '2.0-SNAPSHOT'

compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

compileTestJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

jacoco {
    toolVersion = '0.7.5.201505241946'
}

pmd {
    toolVersion '5.3.4'
    sourceSets = [sourceSets.main]
}

tasks.withType(Pmd) {
    reports.html.enabled = false
}

checkstyle {
    toolVersion '6.7'
    configFile = rootProject.file("checkstyle.xml")
    sourceSets = [sourceSets.main]
}

findbugs {
    toolVersion '3.0.1'
    sourceSets = [sourceSets.main]
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {

    // tag::springboot[]
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion) {
        exclude(module: 'spring-boot-starter-logging')
        exclude(module: 'jackson-databind')
    }

    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion) {
        exclude(module: 'spring-boot-starter-logging')
        exclude(module: 'jackson-databind')
    }


    /*compile(group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: springBootVersion){
        exclude module: "logback-classic"
        exclude(module: 'spring-boot-starter-logging')

    }
*/
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: springBootVersion
    // end::springboot[]

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion


    //assync log4j2
    compile group: 'com.lmax', name: 'disruptor', version: '3.3.2'

    testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.15.1'

    // tag::utils[]
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    // end::utils[]

    // tag::test[]
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion) {
        exclude(module: 'commons-logging')
    }

    compile group: 'javax.servlet', name: 'jstl', version: '1.2'

    compile 'org.apache.tomcat.embed:tomcat-embed-jasper:8.0.30'


    // end::test[]

}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }


        }
    }
}


task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/jacocoHtml"
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}